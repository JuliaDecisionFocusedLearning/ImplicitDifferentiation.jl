var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"api/#Docstrings","page":"API reference","title":"Docstrings","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [ImplicitDifferentiation]","category":"page"},{"location":"api/#ImplicitDifferentiation.ImplicitFunction","page":"API reference","title":"ImplicitDifferentiation.ImplicitFunction","text":"ImplicitFunction{F,C,L}\n\nDifferentiable wrapper for an implicit function x -> ŷ(x) whose output is defined by explicit conditions F(x,ŷ(x)) = 0.\n\nWe can obtain the Jacobian of ŷ with the implicit function theorem:\n\n∂₁F(x,ŷ(x)) + ∂₂F(x,ŷ(x)) * ∂ŷ(x) = 0\n\nThis amounts to solving the linear system A * J = B, where A ∈ ℝᶜᵐ, B ∈ ℝᶜⁿ and J ∈ ℝᵐⁿ.\n\nFields:\n\nforward::F: callable of the form x -> ŷ(x)\nconditions::C: callable of the form (x,y) -> F(x,y)\nlinear_solver::L: callable of the form (A,b) -> u such that A * u = b\n\n\n\n\n\n","category":"type"},{"location":"api/#ImplicitDifferentiation.ImplicitFunction-Tuple{Any}","page":"API reference","title":"ImplicitDifferentiation.ImplicitFunction","text":"implicit(x)\n\nMake ImplicitFunction callable by applying implicit.forward.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainRulesCore.frule-Tuple{ChainRulesCore.RuleConfig, Any, ImplicitFunction, Any}","page":"API reference","title":"ChainRulesCore.frule","text":"frule(rc, (_, Δx), implicit, x)\n\nCustom forward rule for ImplicitFunction.\n\n\n\n\n\n","category":"method"},{"location":"api/#ChainRulesCore.rrule-Tuple{ChainRulesCore.RuleConfig, ImplicitFunction, Any}","page":"API reference","title":"ChainRulesCore.rrule","text":"rrule(rc, implicit, x)\n\nCustom reverse rule for ImplicitFunction.\n\n\n\n\n\n","category":"method"},{"location":"background/#Mathematical-background","page":"Mathematical background","title":"Mathematical background","text":"","category":"section"},{"location":"background/","page":"Mathematical background","title":"Mathematical background","text":"warning: Work in progress\nIn the meantime, please refer to the preprint Efficient and modular implicit differentiation for an introduction to the methods implemented here.","category":"page"},{"location":"examples/2_constrained_optimization/","page":"Constrained optimization","title":"Constrained optimization","text":"EditURL = \"https://github.com/gdalle/ImplicitDifferentiation.jl/blob/main/test/2_constrained_optimization.jl\"","category":"page"},{"location":"examples/2_constrained_optimization/#Constrained-optimization","page":"Constrained optimization","title":"Constrained optimization","text":"","category":"section"},{"location":"examples/2_constrained_optimization/","page":"Constrained optimization","title":"Constrained optimization","text":"In this example, we show how to differentiate through the solution of the following constrained optimization problem:","category":"page"},{"location":"examples/2_constrained_optimization/","page":"Constrained optimization","title":"Constrained optimization","text":"haty(x) = min_y in mathcalC f(x y)","category":"page"},{"location":"examples/2_constrained_optimization/","page":"Constrained optimization","title":"Constrained optimization","text":"where mathcalC is a closed convex set.","category":"page"},{"location":"examples/2_constrained_optimization/","page":"Constrained optimization","title":"Constrained optimization","text":"warning: Work in progress\nThis example will be completed soon.","category":"page"},{"location":"examples/2_constrained_optimization/","page":"Constrained optimization","title":"Constrained optimization","text":"","category":"page"},{"location":"examples/2_constrained_optimization/","page":"Constrained optimization","title":"Constrained optimization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ImplicitDifferentiation","category":"page"},{"location":"#ImplicitDifferentiation.jl","page":"Home","title":"ImplicitDifferentiation.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ImplicitDifferentiation.jl is a package for automatic differentiation of implicit functions.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install it, open a Julia Pkg REPL and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add \"https://github.com/gdalle/ImplicitDifferentiation.jl\"","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"EditURL = \"https://github.com/gdalle/ImplicitDifferentiation.jl/blob/main/test/1_unconstrained_optimization.jl\"","category":"page"},{"location":"examples/1_unconstrained_optimization/#Unconstrained-optimization","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"","category":"section"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"In this example, we show how to differentiate through the solution of the following unconstrained optimization problem:","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"haty(x) = min_y in mathbbR^m f(x y)","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"The optimality conditions are given by gradient stationarity:","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"nabla_x f(x haty(x)) = 0","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"using GalacticOptim\nusing ImplicitDifferentiation\nusing IterativeSolvers\nusing LinearAlgebra\nusing Optim\nusing Statistics\nusing Zygote","category":"page"},{"location":"examples/1_unconstrained_optimization/#Exact-formulae","page":"Unconstrained optimization","title":"Exact formulae","text":"","category":"section"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"To make verification easy, we minimize a quadratic objective","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"f(x y) = lVert x - y rVert^2","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"In this case, the optimization algorithm and optimality conditions have very simple expressions.","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"forward(x) = x\nconditions(x, y) = 2(x - y)\n\nimplicit = ImplicitFunction(; forward=forward, conditions=conditions, linear_solver=gmres)","category":"page"},{"location":"examples/1_unconstrained_optimization/#Black-box","page":"Unconstrained optimization","title":"Black box","text":"","category":"section"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"However, we can also handle the case where no formulae are known, and the user must resort to black box optimization and differentiation algorithms.","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"square_distance(x, y) = sum(abs2, x - y)\n\nfunction forward_black_box(x)\n    fun = OptimizationFunction(square_distance, GalacticOptim.AutoForwardDiff())\n    prob = OptimizationProblem(fun, zero(x), x)\n    sol = solve(prob, LBFGS())\n    return sol.u\nend\n\nfunction conditions_black_box(x, y)\n    gs = Zygote.gradient(ỹ -> square_distance(ỹ, x), y)\n    return gs[1]\nend\n\nimplicit_black_box = ImplicitFunction(;\n    forward=forward_black_box, conditions=conditions_black_box, linear_solver=gmres\n)","category":"page"},{"location":"examples/1_unconstrained_optimization/#Testing","page":"Unconstrained optimization","title":"Testing","text":"","category":"section"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"x = rand(5)","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"We now check whether the forward and reverse rules we defined are coherent with the theoretical derivatives.","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"Zygote.jacobian(implicit, x)[1]","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"Zygote.jacobian(implicit_black_box, x)[1]","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"As expected, we recover the identity matrix as our jacobian, since `haty(x) = x.","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"","category":"page"},{"location":"examples/1_unconstrained_optimization/","page":"Unconstrained optimization","title":"Unconstrained optimization","text":"This page was generated using Literate.jl.","category":"page"}]
}
