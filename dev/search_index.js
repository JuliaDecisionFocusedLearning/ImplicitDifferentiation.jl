var documenterSearchIndex = {"docs":
[{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"","category":"page"},{"location":"api/#Docstrings","page":"API reference","title":"Docstrings","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [ImplicitDifferentiation]","category":"page"},{"location":"api/#ImplicitDifferentiation.ImplicitFunction","page":"API reference","title":"ImplicitDifferentiation.ImplicitFunction","text":"ImplicitFunction{F,C,L}\n\nDifferentiable wrapper for an implicit function x -> ŷ(x) whose output is defined by explicit conditions F(x,ŷ(x)) = 0.\n\nWe can obtain the Jacobian of ŷ with the implicit function theorem:\n\n∂₁F(x,ŷ(x)) + ∂₂F(x,ŷ(x)) * ∂ŷ(x) = 0\n\nThis amounts to solving the linear system A * J = B, where A ∈ ℝᶜᵐ, B ∈ ℝᶜⁿ and J ∈ ℝᵐⁿ.\n\nFields:\n\nforward::F: callable of the form x -> ŷ(x)\nconditions::C: callable of the form (x,y) -> F(x,y)\nlinear_solver::L: callable of the form (A,b) -> u such that A * u = b\n\n\n\n\n\n","category":"type"},{"location":"background/#Mathematical-background","page":"Mathematical background","title":"Mathematical background","text":"","category":"section"},{"location":"background/","page":"Mathematical background","title":"Mathematical background","text":"Work in progress! In the meantime, please refer to Efficient and modular implicit differentiation for an introduction to the methods implemented here.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ImplicitDifferentiation","category":"page"},{"location":"#ImplicitDifferentiation.jl","page":"Home","title":"ImplicitDifferentiation.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ImplicitDifferentiation.jl is a package for automatic differentiation of implicit functions.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install it, open a Julia Pkg REPL and run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add \"https://github.com/gdalle/ImplicitDifferentiation.jl\"","category":"page"}]
}
