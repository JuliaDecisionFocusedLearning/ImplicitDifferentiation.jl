"""
    ImplicitFunction{F,C,L,B}

Wrapper for an implicit function defined by a forward mapping `y` and a set of conditions `c`.

An `ImplicitFunction` object behaves like a function, and every call is differentiable with respect to the first argument `x`.
When a derivative is queried, the Jacobian of `y` is computed using the implicit function theorem:

    ∂/∂y c(x, y(x)) * -∂/∂x y(x) = -∂/∂x c(x, y(x))

This requires solving a linear system `A * J = -B`.

# Fields

- `forward::F`: a callable, does not need to be compatible with automatic differentiation
- `conditions::C`: a callable, must be compatible with automatic differentiation
- `linear_solver::L`: a subtype of `AbstractLinearSolver`, defines how the linear system will be solved
- `conditions_backend::B`: either `nothing` or a subtype of `AbstractDifferentiation.AbstractBackend`, defines how the conditions will be differentiated within the implicit function theorem 

There are two possible signatures for `forward` and `conditions`, which must be consistent with one another:
    
1. Standard: `forward(x, args...; kwargs...) = y` and `conditions(x, y, args...; kwargs...) = c`
2. Byproduct: `forward(x, args...; kwargs...) = (y, z)` and `conditions(x, y, z, args...; kwargs...) = c`.
    
In both cases, `x`, `y` and `c` must be arrays, with `size(y) = size(c)`.
In the second case, the byproduct `z` can be an arbitrary object generated by `forward`.
The positional arguments `args...` and keyword arguments `kwargs...` must be the same for both `forward` and `conditions`.

!!! warning "Warning"
    The byproduct `z` and the other positional arguments `args...` beyond `x` are considered constant for differentiation purposes.
"""
struct ImplicitFunction{F,C,L<:AbstractLinearSolver,B<:Union{Nothing,AbstractBackend}}
    forward::F
    conditions::C
    linear_solver::L
    conditions_backend::B
end

"""
    ImplicitFunction(
        forward,
        conditions;
        linear_solver=IterativeLinearSolver(),
        conditions_backend=nothing,
    )

Construct an `ImplicitFunction` with default parameters.
"""
function ImplicitFunction(
    forward, conditions; linear_solver=IterativeLinearSolver(), conditions_backend=nothing
)
    return ImplicitFunction(forward, conditions, linear_solver, conditions_backend)
end

function Base.show(io::IO, implicit::ImplicitFunction)
    @unpack forward, conditions, linear_solver, conditions_backend = implicit
    return print(
        io, "ImplicitFunction($forward, $conditions, $linear_solver, $conditions_backend)"
    )
end

"""
    (implicit::ImplicitFunction)(x::AbstractArray, args...; kwargs...)

Return `implicit.forward(x, args...; kwargs...)`, which can be either an array `y` or a tuple `(y, z)`.

This call is differentiable.
"""
function (implicit::ImplicitFunction)(x::AbstractArray, args...; kwargs...)
    y_or_yz = implicit.forward(x, args...; kwargs...)
    if !(
        y_or_yz isa AbstractArray ||  # 
        (y_or_yz isa Tuple && length(y_or_yz) == 2 && y_or_yz[1] isa AbstractArray)
    )
        throw(
            DimensionMismatch(
                "The forward mapping must return an array `y` or a tuple `(y, z)`"
            ),
        )
    end
    return y_or_yz
end
